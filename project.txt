{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4c9fba1f",
   "metadata": {},
   "source": [
    "## name: Meihong Li\n",
    "## assignment number: programming project 2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55c23ad6",
   "metadata": {},
   "source": [
    "### Q1\n",
    "1. Create a list called scores with 79,87,92,75,87,100, 83, 91, 88,87, 69, 98,89, 91,100,89, 87.\n",
    "2. asks the user for a positive integer input and stores it as num. \n",
    "3. If the input num is a negative number, print an error message and no further processing. \n",
    "4. If the input is positive, then your program should calculate the number of times num appears in scores. \n",
    "5. Print the result with an appropriate message. \n",
    "6. Test your program with positive and negative inputs as well as zero. Submit your program result for input 87."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b46ca501",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter a positive integer:87\n",
      "the number of times num appears in scores:  4\n"
     ]
    }
   ],
   "source": [
    "#Q1 answer:\n",
    "#creat a list called scores\n",
    "scores=[79,87,92,75,87,100, 83, 91, 88,87, 69, 98,89, 91,100,89, 87]\n",
    "\n",
    "#ask the user for a positive interger input and store it as num\n",
    "num = int(input(\"enter a positive integer:\"))\n",
    "if num<0:\n",
    "    print(\"You enter a wrong number\")\n",
    "else:\n",
    "    count=0\n",
    "    for k in scores:\n",
    "        if k ==num:\n",
    "            count+=1\n",
    "    print(\"the number of times num appears in scores: \",count)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a2bfe39",
   "metadata": {},
   "source": [
    "### Q2\n",
    "In 2020, a small company鈥檚 revenue was $5,300,450, and its EPS (Earnings per Share) was $0.69.\n",
    "The company is planning for annual revenue growth of 8.5%. \n",
    "Its EPS, on the other hand, are expected to grow at 7.5% annually. \n",
    "Calculate and print the company鈥檚 expected (planned) revenue and earnings per share for 2020 and the next seven years (up to 2027). Show the results as a table with 3 columns, with headings for each column. (See the example output below). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d35e7fb5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Year \t Revenue \t EPS\n",
      "2021 \t 5300450 \t 0.69\n",
      "2021 \t 5750988 \t 0.74\n",
      "2022 \t 6239822 \t 0.8\n",
      "2023 \t 6770207 \t 0.86\n",
      "2024 \t 7345674 \t 0.92\n",
      "2025 \t 7970057 \t 0.99\n",
      "2026 \t 8647511 \t 1.06\n",
      "2027 \t 9382550 \t 1.14\n"
     ]
    }
   ],
   "source": [
    "#Q2 answer:\n",
    "revenue=5300450\n",
    "EPS=0.69\n",
    "print(\"Year\", \"\\t Revenue\",\"\\t EPS\")\n",
    "print(2021,\"\\t\",revenue,\"\\t\",EPS)\n",
    "for year in range(2021,2028):\n",
    "    revenue=revenue*(1+0.085)\n",
    "    EPS=EPS*(1+0.075)\n",
    "    print(year,\"\\t\",int(revenue),\"\\t\",round(EPS,2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "049bd7bf",
   "metadata": {},
   "source": [
    "### Q3\n",
    "1. Calculate the sum of all the non-negative inputs and the sum of all the negative inputs.\n",
    "2. If the user enters 9999 (the sentinel), it indicates the end of the input stream.\n",
    "3. The program should also keep track of the total number of inputs, excluding the sentinel. \n",
    "4. Display the following 3 outputs (with appropriate messages) and terminate the program.\n",
    "- the number of inputs processed (excluding the sentinel)\n",
    "- the sum of positive inputs\n",
    "- the sum of the negative inputs\n",
    "- Submit the results for the following input stream (your program should work for any integer input stream)21, -17, 0, -28, 32, 91, 0, 25, 9999\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2e001592",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter an integer:21\n",
      "enter an integer:-17\n",
      "enter an integer:0\n",
      "enter an integer:28\n",
      "enter an integer:32\n",
      "enter an integer:91\n",
      "enter an integer:0\n",
      "enter an integer:25\n",
      "enter an integer:9999\n",
      "the sum of positive inputs 25 the sum of negtive inputs -17\n"
     ]
    }
   ],
   "source": [
    "#Q3 answer:\n",
    "#set the sentinel:\n",
    "sentinel=9999\n",
    "#ask the user enters numbers:\n",
    "n=int(input(\"enter an integer:\"))\n",
    "#loop for the sum of numbers:\n",
    "total=0\n",
    "while n!=9999:\n",
    "    if n>0:\n",
    "        total1=total+n\n",
    "    elif n<0:\n",
    "        total2=total+n\n",
    "    n=int(input(\"enter an integer:\"))\n",
    "print(\"the sum of positive inputs\",total1,\"the sum of negtive inputs\",total2 )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1928b566",
   "metadata": {},
   "source": [
    "### Q4\n",
    "- In Jamestown, clothing that costs less than $15.00 has a lower sales tax rate of 1.7%. Otherwise, the sales tax is 7.65% of the purchase price. Mrs. Warren went shopping and bought several items of clothing, whose prices are: 37.75, 13.50, 41.00, 20.00, 12.95, 17.50, 29.95.\n",
    "- Write a python program in which you calculate the total due amount from Mrs. Warren and print your answer with an appropriate message. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "041a151b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the total due amount is  174.94\n"
     ]
    }
   ],
   "source": [
    "#Q4 answer:\n",
    "prices=[37.75, 13.50, 41.00, 20.00, 12.95, 17.50, 29.95]\n",
    "for price in prices:\n",
    "    if price<15:\n",
    "        sales_tax=price*0.017\n",
    "        \n",
    "    else:\n",
    "        sales_tax=price*0.0765\n",
    "    total=sum(prices)+sales_tax\n",
    "print(\"the total due amount is \",round(total,2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5035fcc",
   "metadata": {},
   "source": [
    "### Q5\n",
    "The US Federal Income Tax for married couples is according to the tax schedule below. \n",
    "- Write a python program that calculates the income tax due for each of the following incomes. For each income, display the taxable income and the income tax with an appropriate message. \n",
    "- Your program should print one line for each of the taxable incomes below.32500.00, 85400.00, 325000.00, 128325.00, 287600.00, 628425.00, 37545.00, 17800.00, 454300.00"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cc707921",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "for a taxable income of 32500.0 the income tax = 3505.0\n",
      "for a taxable income of 85400.0 the income tax = 10368.0\n",
      "for a taxable income of 325000.0 the income tax = 66159.0\n",
      "for a taxable income of 128325.0 the income tax = 19811.5\n",
      "for a taxable income of 287600.0 the income tax = 57183.0\n",
      "for a taxable income of 628425.0 the income tax = 169666.25\n",
      "for a taxable income of 37545.0 the income tax = 4110.4\n",
      "for a taxable income of 17800.0 the income tax = 1780.0\n",
      "for a taxable income of 454300.0 the income tax = 108595.0\n"
     ]
    }
   ],
   "source": [
    "#Q5 answer:\n",
    "#create a list for the taxable incomes:\n",
    "taxable_incomes=[32500.00, 85400.00, 325000.00, 128325.00, 287600.00, 628425.00, 37545.00, 17800.00, 454300.00]\n",
    "for taxable_income in taxable_incomes:\n",
    "    if taxable_income>=0 and taxable_income<=19750:\n",
    "        income_tax= 0.10*taxable_income\n",
    "        print(\"for a taxable income of\",taxable_income, \"the income tax =\",income_tax) \n",
    "    elif taxable_income>19750 and taxable_income<=80250:\n",
    "        income_tax= 1975.00+0.12*(taxable_income-19750)\n",
    "        print(\"for a taxable income of\",taxable_income, \"the income tax =\",income_tax)\n",
    "    elif taxable_income>80250 and taxable_income<=171050:\n",
    "        income_tax= 9235.00+0.22*(taxable_income-80250)\n",
    "        print(\"for a taxable income of\",taxable_income, \"the income tax =\",income_tax)\n",
    "    elif taxable_income>171050 and taxable_income<=326600:\n",
    "        income_tax=29211.00 +0.24*(taxable_income-171050)\n",
    "        print(\"for a taxable income of\",taxable_income, \"the income tax =\",income_tax)\n",
    "    elif taxable_income>326600 and taxable_income<=414700:\n",
    "        income_tax=66543.00 +0.32*(taxable_income-326600)\n",
    "        print(\"for a taxable income of\",taxable_income, \"the income tax =\",income_tax)\n",
    "    elif taxable_income>414700 and taxable_income<=622050:\n",
    "        income_tax=94735.00 +0.35*(taxable_income-414700)\n",
    "        print(\"for a taxable income of\",taxable_income, \"the income tax =\",income_tax)\n",
    "    else:\n",
    "        income_tax=167307.50 +0.37*(taxable_income-622050)\n",
    "        print(\"for a taxable income of\",taxable_income, \"the income tax =\",income_tax)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef8b4848",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

